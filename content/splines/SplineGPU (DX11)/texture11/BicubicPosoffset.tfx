Texture2D PosTex : PREVIOUS;
#include "Bicubic2.fxh"
Texture2D Tex;
Texture2D OffsTex;

SamplerState s0 <string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=CLAMP;AddressV=CLAMP;};
float2 R:TARGETSIZE;
float NeighbourRange = 10;
int OffsLOD = 0;
float OffsInfluence = 0;

float4 pPOS(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_TARGET{
	float4 data = tex2Dbicubic(Tex, s0, x);
	data.xyz += OffsTex.SampleLevel(s0, x, OffsLOD).xyz*OffsInfluence;
    return data;
}

float4 pNORM(float4 PosWVP:SV_POSITION,float2 x:TEXCOORD0):SV_TARGET{
	float3 poso = PosTex.Sample(s0,x).xyz;
	float3 position[8];
	float2 offset = float2(0,-1)*NeighbourRange/R;
	position[0] = PosTex.Sample(s0,x+offset).xyz;
	offset = float2(1,-1)*NeighbourRange/R;
	position[1] = PosTex.Sample(s0,x+offset).xyz;
	offset = float2(1,0)*NeighbourRange/R;
	position[2] = PosTex.Sample(s0,x+offset).xyz;
	offset = float2(1,1)*NeighbourRange/R;
	position[3] = PosTex.Sample(s0,x+offset).xyz;
	offset = float2(0,1)*NeighbourRange/R;
	position[4] = PosTex.Sample(s0,x+offset).xyz;
	offset = float2(-1,1)*NeighbourRange/R;
	position[5] = PosTex.Sample(s0,x+offset).xyz;
	offset = float2(-1,0)*NeighbourRange/R;
	position[6] = PosTex.Sample(s0,x+offset).xyz;
	offset = float2(-1,-1)*NeighbourRange/R;
	position[7] = PosTex.Sample(s0,x+offset).xyz;
	
	float3 norm = 0;
	for(float i=0; i<7; i++)
	{
		float3 v1 = poso-position[i];
		float3 v2 = poso-position[i+1];
		norm += cross(v1, v2);
	}
	
    return float4(normalize(norm),1);
}

technique10 Position{
	pass P1<string format="R32G32B32A32_Float"; >
	{SetPixelShader(CompileShader(ps_4_0,pPOS()));}
}

technique10 Normal{
	pass P1<string format="R32G32B32A32_Float"; >
	{SetPixelShader(CompileShader(ps_4_0,pNORM()));}
}